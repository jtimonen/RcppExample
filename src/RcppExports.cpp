// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// hello_world
void hello_world();
RcppExport SEXP _RcppExample_hello_world() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    hello_world();
    return R_NilValue;
END_RCPP
}
// std_vector_example
std::vector<int> std_vector_example();
RcppExport SEXP _RcppExample_std_vector_example() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(std_vector_example());
    return rcpp_result_gen;
END_RCPP
}
// arma_outerproduct
arma::mat arma_outerproduct(const arma::colvec& x);
RcppExport SEXP _RcppExample_arma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(arma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// arma_3_matrices
arma::Cube<double> arma_3_matrices(const arma::colvec& x);
RcppExport SEXP _RcppExample_arma_3_matrices(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(arma_3_matrices(x));
    return rcpp_result_gen;
END_RCPP
}
// arma_innerproduct
double arma_innerproduct(const arma::colvec& x);
RcppExport SEXP _RcppExample_arma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(arma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// arma_fastLm
Rcpp::List arma_fastLm(const arma::mat& X, const arma::colvec& y);
RcppExport SEXP _RcppExample_arma_fastLm(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(arma_fastLm(X, y));
    return rcpp_result_gen;
END_RCPP
}
// eigen_2_matrices
std::vector<Eigen::MatrixXd> eigen_2_matrices();
RcppExport SEXP _RcppExample_eigen_2_matrices() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(eigen_2_matrices());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppExample_hello_world", (DL_FUNC) &_RcppExample_hello_world, 0},
    {"_RcppExample_std_vector_example", (DL_FUNC) &_RcppExample_std_vector_example, 0},
    {"_RcppExample_arma_outerproduct", (DL_FUNC) &_RcppExample_arma_outerproduct, 1},
    {"_RcppExample_arma_3_matrices", (DL_FUNC) &_RcppExample_arma_3_matrices, 1},
    {"_RcppExample_arma_innerproduct", (DL_FUNC) &_RcppExample_arma_innerproduct, 1},
    {"_RcppExample_arma_fastLm", (DL_FUNC) &_RcppExample_arma_fastLm, 2},
    {"_RcppExample_eigen_2_matrices", (DL_FUNC) &_RcppExample_eigen_2_matrices, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppExample(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
